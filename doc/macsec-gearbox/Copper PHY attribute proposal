Proposal for Copper PHY attributes

MDIX Mode and Status

During copper forced-speed mode, one end of the link must perform an MDI crossover so that each transceiverâ€™s transmitter is connected to the other receiver. PHY can perform an automatic media-dependent interface crossover, eliminating the need for crossover cables or cross-wired ports. SAI_PORT_ATTR_MDIX_MODE_CONFIG attribute can be used to set auto, crossover, or straight mode and SAI_PORT_ATTR_MDIX_MODE_STATUS can be used to read the current status of the MDIX mode

 * @brief Attribute data for #SAI_PORT_ATTR_MDIX_MODE_STATUS
 * Used for MDIX mode status
 */
typedef enum _sai_port_mdix_mode_status_t
{
    /** MDIX mode status straight */
    SAI_PORT_MDIX_MODE_STATUS_STRAIGHT,

    /**  MDIX mode status crossover */
    SAI_PORT_MDIX_MODE_STATUS_CROSSOVER
} sai_port_mdix_mode_status_t;

/**
 * @brief Attribute data for #SAI_PORT_ATTR_MDIX_MODE_CONFIG
 * Used for MDIX mode configuration
 */
typedef enum _sai_port_mdix_mode_config_t
{
    /** MDIX mode auto */
    SAI_PORT_MDIX_MODE_CONFIG_AUTO,

    /** MDIX mode straight */
    SAI_PORT_MDIX_MODE_CONFIG_STRAIGHT,

    /**  MDIX mode cross over */
    SAI_PORT_MDIX_MODE_CONFIG_CROSSOVER
} sai_port_mdix_mode_config_t;

Master/Slave Auto-negotiation Configuration
In 1000BASE-T mode, one end of the link must be configured as the timing master and the other end as the slave.
Master/slave configuration is performed by the auto-negotiation function. The auto-negotiation function first looks at the 
manual master/slave configuration modes advertised by the local PHY and the link partner. If both ends of the link attempt to force
the same manual configuration (both master or both slave), PHY will try to link up and restart auto-negotiation if needed. 
SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE can be used to set the PHY either in Master, Slave, and Auto mode (defer to hardware)
/**
 * @brief Attribute data for #SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE
 * Used for auto negotiation mode to configure master or slave mode
 */
typedef enum _sai_port_auto_neg_config_mode_t
{
    /** Auto neg mode auto */
    SAI_PORT_AUTO_NEG_CONFIG_MODE_AUTO,

    /** Auto neg mode slave */
    SAI_PORT_AUTO_NEG_CONFIG_MODE_SLAVE,

    /** Auto neg mode master */
    SAI_PORT_AUTO_NEG_CONFIG_MODE_MASTER
} sai_port_auto_neg_config_mode_t;


1000BaseX and SGMII Slave Autodetect
When set to true, PHY device can automatically switch between 1000BaseX and SGMII-Slave mode 
and 1000Base-X or SGMII-Slave module can get a link up without modifying PHY configurations.  
  /**
* @brief Enable auto detection between 1000X and SGMII slave mode
*
* @type bool
* @flags CREATE_AND_SET
* @default false
@validonly SAI_PORT_ATTR_SPEED == 1000 or SAI_PORT_ATTR_SPEED == 100 and SAI_PORT_ATTR_MEDIA_TYPE == SAI_PORT_ATTR_MEDIA_TYPE_FIBER
*/
SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT,


Dual media support
External PHY support dual media mode where both Copper and Fiber ports are available. SAI_PORT_DUAL_MEDIA_NONE can be used to configure media types for dual media supported PHYs.
sai_port_dual_media_t enum supports all the supported configurations.


EEE Latency Mode

EEE Latency mode allows user to configure a fixed or variable latency when EEE is enabled.
Variable latency can be configured using SAI_PORT_ATTR_EEE_WAKE_TIME

/**
* @brief Configure EEE latency mode
*
* False: Fixed latency
* True: Variable latency
*
* @type bool
* @flags CREATE_AND_SET
* @default false
*/
SAI_PORT_ATTR_EEE_LATENCY_MODE,


Module Type

SAI_PORT_ATTR_MODULE_TYPE allows user to force various module types when fiber interface is active. 
Supported fiber interfaces are 1000BASE-X, SGMII-SLAVE, and 100FX. 
/**
 * @brief Attribute data for #SAI_PORT_ATTR_MODULE_TYPE
 * Used for configuring Fiber module type
 */
typedef enum _sai_port_module_type_t
{
    /** Module Type Fiber */
    SAI_PORT_MODULE_TYPE_1000BASE-X,

    /** Module Type SGMII-Slave */
    SAI_PORT_MODULE_TYPE_SGMII_SLAVE,

    /** Module Type 100FX */
    SAI_PORT_MODULE_TYPE_100FX,
} sai_port_module_type_t;

/**
* @brief Configure Fiber module type
*
* @type sai_port_module_type_t
* @flags CREATE_AND_SET
* @default SAI_PORT_MODULE_TYPE_1000BaseX
 * @validonly SAI_PORT_ATTR_SPEED == 1000 or SAI_PORT_ATTR_SPEED == 100 and SAI_PORT_ATTR_MEDIA_TYPE == SAI_PORT_ATTR_MEDIA_TYPE_FIBER    
*/
SAI_PORT_ATTR_MODULE_TYPE,
